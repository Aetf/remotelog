- [DONE] Is reording causing failures
    * increase reording buffer
- [DONE] Maximum un-acked, un-failed frames -> congestion window

- [DONE] Stamp at spout ack
- [DONE] timing fat_features opeartions separately
- [DONE] split fat_features into indivitual bolts

- [DONE] measure CPU utilization
- [DONE] queueing size at each stage
    * [DONE] with different max pending number: 128, 64, 96
- same vs. different node
    * change fat_features parallelism 52->25
    * Track how many frames goes from scale to fat_features on different machine
- [DONE] try scale parallelism at 2

- Analysis
    * [DONE] stage sorting orders breaks when using string value for event stages

- [DONE] Try max pending = 1 to show pure service time
    * [DONE] explain the fps graph: streamreader was paused when spout is paused
    * [DONE] explain the latency graph
- Reason for periodic failures
    * spout emits many frames in one second, so these frames fail in one second later
- Effect of frameskip
    * [DONE] use frameskip on SpoutOnly
    * use frameskip on DNNTopology

- [DONE] Raw services time: DNNTopology (CPU, GPU)
- ~~Make GPU working on Storm~~

- [DONE] Why not scale

- [DONE] fix cores, find maximum fps with different parallelism hints
    - 8 cores
    - 16 cores
    - 32 cores
- [DONE] 1 FPS with only 1 cores: breaks

- [DONE] Fix timing
    * less than 5 frames are dropped now (out of ~3000)
- [DONE] Better FPS control
    * can achieve 30+ FPS steadily under heavy load
- Run over network on 2 nodes
    * [DONE] fix cores, max fps with different parallelism hints with latency constrain
    * [DONE] service time
    * fix fps and cores, latency with different parallelism hints
        + 2.5s latency

- [DONE] !!! low workload for 8 core, 16 core, 32 core, 32+32 core
- [DONE] !!! fix latency 2.5s, for 16 core, 32 core, 32+32 core
    * [DONE] 16 cores, 7 FPS, fat > 32
    * [DONE] 32 cores, FPS < 8, fat = range(27, 33)
    * [DONE] 32+32 cores, scale=1, fat = [40,50,60,80,100], FPS = [14,15,16]
    * [DONE] 8 cores, fat > 12, FPS = [3, 4]
    * [DONE] re-run 32+32 cores, scale=2 for FPS>11
- [DONE] Organize work into notebook
- [DONE] verify if frames sit on the same machine
- [DONE] 32 cores 7 FPS    SMT case?

- [DONE] check break-downs for each case
- reason for 4s latency
    * try change nice value for fat_features thread
    * ask Parker about the variation in computation time

- Get more reliable data from GPU flavor
- Get closed captioning work with caffe


### new workload

- motion classification
- object tracking
- captioning (motivation?): video accessibility
- searching
    * panopto: search substitles and words on screen (OCR)


##### Some questions
 - The difference between video streaming and normal streaming which typically involves logs and other form of text.
- From the scheduling perspective, what the workload actually does doesn't matter, as long as the workload can be classified into a certain category, i.e. computation intensive, memory intensive, or network I/O intensive.
    * Therefore, what is the streaming video application specific effects on the scheduling strategy?

##### Related papers
- [Large-scale Video Classification with Convolutional Neural Networks](http://cs.stanford.edu/people/karpathy/deepvideo/)
- [Motion pattern-based video classification and retrieval](http://dl.acm.org/citation.cfm?id=1283278)
- [Motion recovery for video content classification](http://dl.acm.org/citation.cfm?id=211433)

##### Related resources
- conferences
    * vision
        + CVPR
        + ICCV
    * System
        + ICDCS
    * ASPLOS (targeting)

- scheduling multiple topology at the same time

- storm benchmark specific to streaming videos
    * an end-to-end video streaming analysis applicaotin
    * Yahoo! benchmarks
    * Yahoo! CaffeOnSpark
- intel-hadoop/storm-benchmark
    * simple topology

- GPU batching
- [Realword Storm application](http://storm.apache.org/releases/current/Powered-By.html)
- [A list of Storm benchmarks and other resources](https://github.com/manuzhang/awesome-streaming#benchmark)
- [A great article about streaming](https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101)
